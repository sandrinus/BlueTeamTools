# Getting all AD users except self, krbtgt, whiteteam users
Get-ADUser -Filter "SamAccountName -notlike '$Env:UserName' -and SamAccountName -notlike 'krbtgt' -and SamAccountName -notlike 'black-team' -and SamAccountName -notlike 'blackteam' -and SamAccountName -notlike 'white-team' -and SamAccountName -notlike 'whiteteam' -and SamAccountName -notlike 'cucumber' -and SamAccountName -notlike '<domain_user_here>'" -Properties SamAccountName | Select-Object -ExpandProperty SamAccountName | Out-File -FilePath "users.txt"

# Getting all local users except self, whiteteam users
Get-CimInstance -ClassName Win32_UserAccount -Filter "LocalAccount='True'" | Where-Object { $_.Name -notlike $Env:UserName -and $_.Name -notlike '' -and $_.Name -notlike '' } | Select-Object -ExpandProperty Name | Out-File -FilePath "users.txt"

# Firewall Script
.\firewall.ps1 -EnableLockoutPrevention [$true | $false] -ExtraRules [<name>io,<name1>i,<name2>o] -scoringIP [<name>,x.x.x.x] -scoringIP2 [<name1>,x.x.x.x] -ansibleIP [x.x.x.x] -wazuhIP [x.x.x.x] -rdpIP [x.x.x.x] -domainSubnet [x.x.x.x/x] -dcIP [x.x.x.x] -caIP [x.x.x.x] 

# Remove TacticalRMM and Mesh Agent
Stop-Service TacticalRMM; Stop-Service 'Mesh Agent'; Remove-Item 'C:\Program Files\Mesh Agent\' -Recurse; Remove-Item "C:\Program Files\TacticalAgent\" -Recurse; Remove-Item 'C:\Program Files\TacticalRMM\' -Recurse

# Recon of listening and active connections:
while ($true){Get-NetTCPConnection -State Listen,Established -ErrorAction "SilentlyContinue" | Sort-Object state,localport | Select-Object LocalAddress,LocalPort,RemoteAddress,RemotePort,State,@{'Name'='CommandLine';'Expression'={(Get-CimInstance -Class Win32_Process -Filter "ProcessId = $($_.OwningProcess)").CommandLine}} | Format-Table -AutoSize; sleep 10; clear}

# Listing and killing processes
tasklist /svc /FO table
taskkill /F /PID <pid>

# Get items in a directory, sort by last modified time, return only files modified in the last x days
Get-ChildItem [directory]-Recurse -Force | Sort-Object LastWriteTime -Descending | Where-Object { $_.LastWriteTime -gt (Get-Date).AddDays([days]) }

# Look for matching hashes of a file
$h=(Get-FileHash [file]).Hash; gci [dir] |?{($_|Get-FileHash).Hash -eq $h}

# "unhiding" a hidden service
sc sdset <service name> "D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)"

# delete a scheduled task
schtasks /delete /tn "<task folder path>\<task name>" /f

Log querying commands:

# Success & Failed Logons
wevtUtil qe Security /q:"*[System[(EventID=4624 or EventID=4625)]]" /c:5 /rd:true /f:text >Parsed\%computername%_Logon_Events_Win7.log

# User Account Change
wevtUtil qe Security /q:"*[System[(EventID=4738)]]" /c:5 /rd:true /f:text >Parsed\R_%computername%_User_Account_Change_Win7.log

# Specific User Account Changes
wevtutil qe Security /q:"*[System[(EventID=4725 or EventID=4722 or EventID=4723 or EventID=4724 or EventID=4726 or EventID=4767)]]" /c:10 /f:text

# New Service Installed
wevtUtil qe Security /q:"*[System[(EventID=7045)]]" /c:5 /rd:true /f:text >Parsed\R_%computername%_New_Service_Installed_Win7.log

# Registry Changed - "Object Name"
WevtUtil qe Security /q:"*[System[(EventID=4657)]]" /c:5 /rd:true /f:text |find /i "Object Name"

# File or Registry Changed - "Object Name"
WevtUtil qe Security /q:"*[System[(EventID=4663)]]" /c:50 /rd:true /f:text |find /i "Object Name"

# Files - New files w/"webm"
WevtUtil qe Security /q:"*[System[(EventID=4663)]]" /c:50 /rd:true /f:text |find /i "wbem"

# Process Launches
WevtUtil qe Security /q:"*[System[(EventID=4688)]]" /c:5 /rd:true /f:text 

# Modified Service Stopped
WevtUtil qe Security /q:"*[System[(EventID=4656)]]" /c:5 /rd:true /f:text

# Scheduled Task Installed or Modified
WevtUtil qe Security /q:"*[System[(EventID=4698 or EventID=4702)]]" /c:5 /rd:true /f:text

# Special Privileges assigned
WevtUtil qe Security /q:"*[System[(EventID=4672)]]" /c:5 /rd:true /f:text

# PowerShell executed
WevtUtil qe "Windows PowerShell" /q:"*[System[(EventID=501)]]" /c:5 /rd:true /f:text >Parsed\%computername%_PS_Cmds_Executed_Win7.log

# Specific "Command Name" executed
WevtUtil qe "Windows PowerShell" /q:"*[System[(EventID=500)]]" /c:5 /rd:true /f:text | find /I "CommandName" 

# Specific "Command Line" executed
WevtUtil qe "Windows PowerShell" /q:"*[System[(EventID=500)]]" /c:5 /rd:true /f:text | find /I "CommandLine"

# Specifc Cmdlet and Scripts executed
WevtUtil qe "Windows PowerShell" /q:"*[System[(EventID=501)]]" /c:1000 /rd:true /f:text | findstr "Logged CommandLine Cmdlet Script"

# PowerShell 4 and 5, Event ID 4104
# Anything that is a "Get-" call
WevtUtil qe "Microsoft-Windows-PowerShell/Operational" /q:"*[System[(EventID=4104)]]" /c:1000 /rd:true /f:text | findstr /i "Get-"

# Anything that is an "iex" call
WevtUtil qe "Microsoft-WindowsPowerShell/Operational" /q:"*[System[(EventID=4104)]]" /c:1000 /rd:true /f:text | findstr /i "iex"

# querying logs through powershell example
# get-eventlog -logname "Windows PowerShell" -computername <your_systemname> | where {$_.eventID -eq 400}

#CA
#fix Subject supplies altname
certutil –getreg policyEditFlags
certutil -config "CA_HOST\CA_NAME" -setreg policy\EditFlags - EDITF_ATTRIBUTESUBJECTALTNAME2
#Enrollee supplies Subject Certs
Get-ADobject -Filter { ObjectClass -eq "PKIcertificateTemplate" } -SearchBase (Get-ADRootDSE).ConfigurationNamingContext -prop * | Select Name, mspki-certificate-name-flag, @{ Name = "SupplyInRequest" ; Expression = { $_.'mspki-certificate-name-flag' -band 0x00000001 } }
#Strict User Mappings
Registry Key: HKLM\SYSTEM\CurrentControlSet\Services\Kdc
Set DWORD value of “UseSubjectAltName” to 0

Registry Key: HKLM\CurrentControlSet\Control\SecurityProviders\SCHANNEL
Set value to 0x1 or 0x2

Local Group: gpedit.msc
Local Security: secpol.msc
GPO - Domain Group: gpmc.msc

AD Domains and Trusts
domain.msc
Active Directory Management
admgmt.msc
AD Sites and Services
dssite.msc
AD Users and Computers
dsa.msc
ADSI Edit
adsiedit.msc
Authorization manager
azman.msc
Certification Authority Management
certsrv.msc
Certificate Templates
certtmpl.msc
Cluster Administrator
cluadmin.exe
Computer Management
compmgmt.msc
Component Services
comexp.msc
Configure Your Server
cys.exe
Device Manager
devmgmt.msc
DHCP Management
dhcpmgmt.msc
Disk Defragmenter
dfrg.msc
Disk Manager
diskmgmt.msc
Distributed File System
dfsgui.msc
DNS Management
dnsmgmt.msc
Event Viewer
eventvwr.msc
Indexing Service Management
ciadv.msc
IP Address Manage
ipaddrmgmt.msc
Licensing Manager
llsmgr.exe
Local Certificates Management
certmgr.msc
Local Group Policy Editor
gpedit.msc
Local Security Settings Manager
secpol.msc
Local Users and Groups Manager
lusrmgr.msc
Network Load balancing
nlbmgr.exe
Performance Monitor
perfmon.msc
PKI Viewer
pkiview.msc
Public Key Management
pkmgmt.msc
Quality of Service Control Management
acssnap.msc
Remote Desktop
tsmmc.msc
Remote Storage Administration
rsadmin.msc
Removable Storage
ntmsmgr.msc
Removable Storage Operator Requests
ntmsoprq.msc
Routing and Remote Access Manager
rrasmgmt.msc
Resultant Set of Policy
rsop.msc
Schema management
schmmgmt.msc
Services Management
services.msc
Shared Folders
fsmgmt.msc
SID Security Migration
sidwalk.msc
Telephony Management
Tapimgmt.msc
Task Manager
Taskschd.msc
Task Manager
taskmgr
Terminal Server Configuration
tscc.msc
Terminal Server Licensing
licmgr.exe
Terminal Server Manager
tsadmin.exe
Teminal Services RDP	MSTSC
Teminal Services RDP to Console	mstsc /v:[server] /console 	 
UDDI Services Managment
uddi.msc
Windows Mangement Instumentation
wmimgmt.msc
WINS Server manager
Winsmgmt.msc